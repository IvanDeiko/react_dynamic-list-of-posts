{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","name","address","href","email","Comment","key","className","body","CommentList","comments","map","comment","Post","title","components_User","user","components_CommentList","PostList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","requested","loaded","postsList","postsFound","loadItems","bind","assertThisInitialized","searchPost","url","fetch","then","res","json","data","_this2","setState","Promise","all","loadData","_ref","_ref2","slicedToArray","posts","users","post","objectSpread","find","userId","id","filter","postId","event","inputValue","target","value","trim","includes","type","onInput","placeholder","length","item","onClick","React","Component","App","components_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e03fdff8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return (\r\n    <div>\r\n      <p>{props.name}</p>\r\n      <p>{props.address}</p>\r\n      <a href={\"mailto:\" + props.email}>{props.email}</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\n\r\nfunction Comment(props) {\r\n  return (\r\n    <div key={props.name} className=\"comment\">\r\n      <h4>{props.name}</h4>\r\n      <p>{props.body}</p>\r\n      <a href={\"mailto:\" + props.email}>{props.email}</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Comment;\r\n","import React from 'react';\r\nimport Comment from './Comment'\r\n\r\nfunction CommentList(props) {\r\n  return (\r\n    <div className=\"comments\">\r\n      {props.comments.map(comment => Comment(comment))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommentList;\r\n","import React from 'react';\r\nimport User from './User';\r\nimport CommentList from './CommentList';\r\n\r\nfunction Post(props) {\r\n  return (\r\n    <div key={props.title} className=\"post\">\r\n      <h3>{props.title}</h3>\r\n      <p>{props.body}</p>\r\n      <User name={props.user.name} \r\n            email={props.user.email} \r\n            address={props.user.address['city']} \r\n      />\r\n      <CommentList comments={props.comments} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from './Post';\r\n\r\nclass PostList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      requested: false,\r\n      loaded: false,\r\n      postsList: [],\r\n      postsFound: []\r\n    }\r\n    this.loadItems = this.loadItems.bind(this);\r\n    this.searchPost = this.searchPost.bind(this);\r\n  }\r\n\r\n  loadData(url) {\r\n    return fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => data);\r\n  }\r\n\r\n  loadItems() {\r\n    this.setState({\r\n      requested: true\r\n    });\r\n\r\n    Promise.all([\r\n      this.loadData('https://jsonplaceholder.typicode.com/posts'),\r\n      this.loadData('https://jsonplaceholder.typicode.com/users'),\r\n      this.loadData('https://jsonplaceholder.typicode.com/comments')\r\n    ])\r\n    .then(([posts, users, comments]) => this.setState({\r\n      loaded: true,\r\n      postsList: posts.map((post) => ({\r\n        ...post,\r\n        user: users.find(user => post.userId === user.id),\r\n        comments: comments.filter(comment => comment.postId === post.id)\r\n      }))\r\n    }))\r\n  }\r\n\r\n  searchPost(event) {\r\n    const inputValue = event.target.value.trim();\r\n    this.setState({\r\n      postsFound: this.state.postsList.filter((post) => {\r\n        return post.title.includes(inputValue) || post.body.includes(inputValue)\r\n      })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.requested) {\r\n      return <button onClick={this.loadItems}>Load</button>;\r\n    } else if (this.state.loaded) {\r\n      return (\r\n        <div>\r\n          <input type=\"text\" onInput={this.searchPost} placeholder=\"Search...\" />\r\n          <section className=\"posts-list\">\r\n            {!this.state.postsFound.length ?\r\n              this.state.postsList.map((item) => Post(item)) :\r\n                this.state.postsFound.map((item) => Post(item))\r\n            }\r\n          </section>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <button>Loading...</button>\r\n    }\r\n  }\r\n}\r\n\r\nexport default PostList;\r\n","import React from 'react';\nimport './App.css';\nimport PostList from './components/PostList';\n\nfunction App() {\n  return (\n   <PostList/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}